openapi: 3.0.1
info:
  title: Post and Comment API
  description: API for managing posts and comments.
  version: 1.0.0

tags:
  - name: Posts
    description: Operations related to posts
  - name: Comments
    description: Operations related to comments on posts
  - name: Authentication
    description: Operations related to authentication tokens
  - name: Resources
    description: Operations related to uploading & downloading resources
  - name: Rooms
    description: Operations related to chat rooms

paths:
  # Post Routes
  /post:
    get:
      tags:
        - Posts
      summary: Retrieve all posts
      parameters:
        - in: query
          name: sender
          schema:
            type: string
          description: Filter posts by sender
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request - Missing required fields
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token

  /post/{postId}:
    put:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Update a post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request - Invalid post ID or missing required fields
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token
        '404':
          description: Post not found

  /post/{postId}/comment:
    get:
      tags:
        - Posts
      summary: Retrieve comments for a specific post
      operationId: getCommentsByPostId
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to fetch comments for
          schema:
            type: string
      responses:
        '200':
          description: A list of comments for the specified post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request - Invalid postId
        '404':
          description: Not found - The postId does not exist

  /post/{postId}/like:
    put:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Update like status for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to like or unlike
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: boolean
              description: Indicates whether to like (true) or unlike (false) the post
      responses:
        '200':
          description: Like status updated successfully
        '400':
          description: Bad request - Invalid post ID or missing required fields
          content:
            text/plain:
              examples:
                default:
                  value: "Bad Request"
                booleanBody:
                  value: "Bad Request. Body accepts `true` or `false` values only"
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token
        '404':
          description: Post not found

  /post/like:
    get:
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: Retrieve liked posts for a specific user
      responses:
        '200':
          description: A list of liked posts for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad request - Invalid userId
        '401':
          description: Unauthorized - Missing token

  # Comment Routes
  /comment:
    get:
      tags:
        - Comments
      summary: Retrieve all comments
      responses:
        '200':
          description: List of comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request - Missing required fields or invalid post ID
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token
        '404':
          description: Post not found

  /comment/{commentId}:
    put:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Update a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request - Invalid comment ID or missing required fields
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token
        '404':
          description: Comment not found

    delete:
      tags:
        - Comments
      security:
        - BearerAuth: []
      summary: Delete a comment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '400':
          description: Bad request - Invalid comment ID
        '401':
          description: Unauthorized - Missing token
        '403':
          description: Forbidden - Invalid or expired token
        '404':
          description: Comment not found

  /comment/post/{postId}:
    get:
      tags:
        - Comments
      summary: Get comments for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of comments for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request - Invalid post ID
        '404':
          description: Post not found

  # Authentication Routes
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '200':
          description: User successfully registered
        '400':
          description: Bad request - Invalid input

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  _id:
                    type: string
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: New tokens generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Invalid refresh token

  /resource/image:
    post:
      tags:
        - Resources
      summary: Upload an image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploaded successfully
          content:
            text/plain:
              schema:
                description: The name of the uploaded file
                type: string                
        '400':
          description: Bad request
          content:
            text/plain:
              examples:
                fileTooLarge:
                  value: "File too large"
                invalidFileType:
                  value: "Invalid file type. Only images are allowed: /jpeg|jpg|png|gif/"
                noFileUploaded:
                  value: "No file uploaded"
        '500':
          description: Internal server error

  /resource/image/{filename}:
    get:
      tags:
        - Resources
      summary: Retrieve an image
      security:
        - BearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: The name of the image file to retrieve
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
        '500':
          description: Internal server error

  /room/user/{receiverUserId}:
    get:
      tags:
        - Rooms
      security:
        - BearerAuth: []
      summary: Get room ID by user IDs
      parameters:
        - name: receiverUserId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the receiver user
      responses:
        '200':
          description: Room ID retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: The ID of the room
        '400':
          description: Bad request

components:
  schemas:
    Post:
      type: object
      required:
        - _id
        - sender
        - title
        - content
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
          description: The unique identifier of the post
        sender:
          type: string
          description: The sender of the post
        title:
          type: string
          description: The title of the post
        content:
          type: string
          description: The content of the post
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the post was created
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the post was last updated

    PostRequest:
      type: object
      required:
        - sender
        - title
        - content
      properties:
        sender:
          type: string
          description: The sender of the post
        title:
          type: string
          description: The title of the post
        content:
          type: string
          description: The content of the post

    Comment:
      type: object
      required:
        - _id
        - postId
        - sender
        - content
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
          description: The unique identifier of the comment
        postId:
          type: string
          description: The ID of the post the comment belongs to
        sender:
          type: string
          description: The sender of the comment
        content:
          type: string
          description: The content of the comment
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the comment was created
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the comment was last updated

    CommentRequest:
      type: object
      required:
        - postId
        - sender
        - content
      properties:
        postId:
          type: string
          description: The ID of the post the comment should belong to
        sender:
          type: string
          description: The sender of the comment
        content:
          type: string
          description: The content of the comment

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        _id:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint
